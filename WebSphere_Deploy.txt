/// Import Dynatrace library ///

@Library('dynatrace@master') _
def event = new com.dynatrace.ace.Event()

def tagMatchRules =[ [
    meTypes : ["HOST"],
    entityId :["HOST-8959DEAE74DB0FAE"],
    tags : [ ["context":"CONTEXTLESS", "key":"NON-Production"],
             ["context":"CONTEXTLESS", "key":"Midrange"] ]
]]

/// PIPELINE START ///

pipeline {
    agent any
    options { skipDefaultCheckout(true) }
    environment {
        DT_TENANT_URL = 'https://xxr75078.live.dynatrace.com/'
        DT_API_TOKEN  = credentials('DynatraceJenkins')
    }
    triggers { upstream(upstreamProjects: 'WebSphere_AutoBuild, WebSphere_ManualBuild', threshold: hudson.model.Result.SUCCESS) }
    stages{
    stage ('GetArtifacts') {
        steps{
            cleanWs()
            script{
               copyArtifacts filter: '**/target/*.ear, **/target/*.war, **/target/*.zip', fingerprintArtifacts: true, projectName: 'WebSphere_AutoBuild', flatten: true, selector: workspace(), target: 'artifacts'
               //copyArtifacts filter: '**/target/*.ear, **/target/*.war, **/target/*.zip', fingerprintArtifacts: true, projectName: 'WebSphere_AutoBuild', flatten: true, selector: lastWithArtifacts(), target: 'artifacts'
            }
        }
        }
    stage ('DeploytoDev') {
        steps{
        script{
         sh 'echo $ArtifactName'
         withCredentials([usernamePassword(credentialsId: 'icmdeployuser', passwordVariable: 'icmpwd', usernameVariable: 'icmuser')]) {
         def remote = [name: 'icmpoc', host:'kycspcicmlx01v.corp.ngsmedicare.com', user: icmuser, password: icmpwd, allowAnyHosts: 'true'] 
		 //sshPut remote: remote, from: 'artifacts/**.ear', into: '/tmp/artifacts/'
		// sshCommand remote: remote, command: "rm -rf /tmp/artifacts"
		 sshPut remote: remote, from: "artifacts/./", filterRegex: /.ear$/, into: "/tmp"
		// sshCommand remote: remote, command: "ls -l /tmp"
        }
        }
    }
    }
    stage ('Approval for QA') {
		steps {
			echo "Approval for QA deployment"
			timeout(time: 7, unit: 'DAYS') {
			input message : ' Do you want to deploy to QA?', submitter: 'any'
			}
		
		}
	}
    stage ('DeploytoQA') {
        steps{
        script{
         sh 'echo $ArtifactName'
         withCredentials([usernamePassword(credentialsId: 'icmdeployuser', passwordVariable: 'icmpwd', usernameVariable: 'icmuser')]) {
         def remote = [name: 'icmpoc', host:'kycspcicmlx01v.corp.ngsmedicare.com', user: icmuser, password: icmpwd, allowAnyHosts: 'true'] 
		 //sshPut remote: remote, from: 'artifacts/**.ear', into: '/tmp'
		 //sshCommand remote: remote, command: "rm -rf /tmp/artifacts"
		// sshPut remote: remote, from: "artifacts/./", filterRegex: /.ear$/, into: "/tmp"
		 //sshCommand remote: remote, command: "ls -l /tmp"
        }
        }
    }
    }
    stage('leapwork') {
        steps{
		catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
           step([$class: 'LeapworkJenkinsBridgeBuilder',
           leapworkAccessKey: 'gdiHC5qC8W2nck3V',
           leapworkDelay: '5',
           leapworkDoneStatusAs: 'Success',
           leapworkHostname: '30.245.4.92',
           leapworkPort: '9001',
           leapworkReport: 'report.xml',
           leapworkSchIds: '8d48b7fc-1460-4cad-9833-a34a99b6ae51',
           leapworkSchNames: 'IJPOC_OnDemand',
           leapworkWritePassedFlowKeyFrames: false,
           ]);
           step([$class: "JUnitResultArchiver", testResults: "report.xml"]);
           script {
           if(currentBuild.result != "FAILURE") {
             echo "RESULT: ${currentBuild.result}  SUCCESS INFO"
           } else {
             echo "RESULT: ${currentBuild.result}  FAIL INFO"
           }
           }
        }
		}
}
}
post{
    always {
        script
        {
            def status = event.pushDynatraceDeploymentEvent   (  
              tagRule: tagMatchRules,
              //deploymentName: "${env.JOB_NAME}",
              //deploymentVersion: "${env.BUILD_NUMBER}",
              //deploymentProject: "myDeploymentProject",
             // remediationAction: "myRemediationAction",
              customProperties : [
                  "Jenkins JOB_NAME": "${env.JOB_NAME}",
                  "Jenkins BUILD_NUMBER": "${env.BUILD_NUMBER}",
                  "Build Status": "${currentBuild.currentResult}",
                  "Build Duration": "${currentBuild.durationString}"
              ]
            )
            }
    }
}
}